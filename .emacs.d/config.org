-*- mode: org -*-
#+STARTUP: overview content

* to investigate

https://wilkesley.org/~ian/xah/emacs/emacs.html
https://www.reddit.com/r/emacs/comments/1ai00g5/more_totally_evident_but_super_useful_emacs/

https://github.com/Wilfred/helpful
https://github.com/Alexander-Miller/treemacs
https://github.com/editorconfig/editorconfig-emacs?tab=readme-ov-file https://editorconfig.org

* startup

From https://github.com/howardabrams/dot-files/blob/master/emacs.org

#+BEGIN_SRC emacs-lisp
;; (setq debug-on-error t)
;; (emacs-init-time)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq package-enable-at-startup nil) ;; don't make installed packages available before loading the init.el file.
;; (setq frame-inhibit-implied-resize t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; max memory available for gc on startup
(defvar me/gc-cons-threshold (* 128 1024 1024)) ;; 128mb
(setq gc-cons-threshold most-positive-fixnum
      gc-cons-percentage 0.6)
(add-hook 'emacs-startup-hook
          (lambda () (setq gc-cons-threshold me/gc-cons-threshold
                           gc-cons-percentage 0.1)))

;; max memory available for gc when opening minibuffer
(defun me/defer-garbage-collection-h ()
  (setq gc-cons-threshold most-positive-fixnum))

(defun me/restore-garbage-collection-h ()
  ;; Defer it so that commands launched immediately after will enjoy the benefits.
  (run-at-time
   1 nil (lambda () (setq gc-cons-threshold me/gc-cons-threshold))))

(add-hook 'minibuffer-setup-hook #'me/defer-garbage-collection-h)
(add-hook 'minibuffer-exit-hook #'me/restore-garbage-collection-h)
(setq garbage-collection-messages nil)
#+END_SRC

Increase the amount of data which Emacs reads from the process#

#+BEGIN_SRC emacs-lisp
(setq read-process-output-max (* 3 1024 1024))
#+END_SRC

* general

** mac

#+BEGIN_SRC emacs-lisp
(when (eq system-type 'darwin)
  (use-package emacs
    :custom
    (mac-command-modifier 'meta)     ; command as super
    (mac-option-modifier 'option)     ; alt as meta
    (mac-right-option-modifier 'left)
    (mac-control-modifier 'control)
    (mac-pass-command-to-system t)
    )
  )
;; when on emacs-mac
(when (fboundp 'mac-auto-operator-composition-mode)
  (mac-auto-operator-composition-mode)   ;; enables font ligatures
  )

#+END_SRC

** emacs

#+BEGIN_SRC emacs-lisp
(use-package emacs
  :init
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
  (defun crm-indicator (args)
    (cons (format "[CRM%s] %s" (replace-regexp-in-string "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" "" crm-separator) (car args))
          (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  ;; TAB cycle if there are only few candidates
  ;; (setq completion-cycle-threshold 3)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
  (setq read-extended-command-predicate
        #'command-completion-default-include-p)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t)

  ;; Enable indentation+completion using the TAB key.
  ;; `completion-at-point' is often bound to M-TAB.
  (setq tab-always-indent 'complete)
  :custom
  '(minibuffer-prompt-properties (quote (read-only t cursor-intangible t face minibuffer-prompt)))
  (user-full-name "bsparkes")
  (user-mail-address "bsparkes@alumni.stanford.edu")
  :bind
  (("C-z" . ignore)
   ("C-x k" . kill-this-buffer)
   ("C-x K" . kill-buffer)
   ("RET" . newline-and-indent) ;; go to indentation on new line
   ("<S-down-mouse-1>" . mouse-save-then-kill) ;; remove buffer-face on shift click
   ("<mouse-2>" . ignore) ;; figure out what to do with middle button…
   ("<mouse-3>" . context-menu-open)
   )
  ;; :hook
  )

(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

** saving & backups

#+BEGIN_SRC emacs-lisp
(desktop-save-mode)
(save-place-mode t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq savehist-file "~/.emacs.d/savehist")
(setq savehist-additional-variables
      '(buffer-name-history
        compile-command
        extended-command-history
        file-name-history
        kill-ring))
(savehist-mode t)
#+END_SRC

- Change backup location and make some backup settings
  - From: http://pragmaticemacs.com/emacs/auto-save-and-backup-every-save/

#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs.d/backups"))
      backup-by-copying t       ; don't clobber symlinks
      kept-new-versions 10      ; keep 10 latest versions
      kept-old-versions 0       ; don't bother with old versions
      delete-old-versions t     ; don't ask about deleting old S versions
      version-control t         ; number backups
      vc-make-backup-files nil) ; backup version controlled files

(setq-default delete-by-moving-to-trash t) ; trash instead of removing
(setq create-lockfiles nil) ;; no need to create lockfiles
#+END_SRC

Auto-save often
- every 20 characters typed is the minimum
#+BEGIN_SRC emacs-lisp
(setq auto-save-interval 200)
(global-auto-revert-mode t) ; for reloading bib files, etc.
#+END_SRC

** input

#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil
							tab-width 2)
(setq echo-keystrokes 0.1) ;; turn down time to echo keystrokes so no waiting for things to happen.
(setq sentence-end-double-space nil)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(delete-selection-mode t) ;; delete selected text by typing
(global-subword-mode t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq indicate-empty-lines t ;; indicate empty lines at end of a buffer
      require-final-newline t)
#+END_SRC

** locale

#+BEGIN_SRC emacs-lisp
(prefer-coding-system 'utf-8)
(when (fboundp 'set-charset-priority) (set-charset-priority 'unicode))
(setq locale-coding-system 'utf-8)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(set-locale-environment "en_GB.UTF-8")
(setenv "LANG" "en_GB.UTF-8")
#+END_SRC

* visual stuff

** display

#+BEGIN_SRC emacs-lisp
(setq uniquify-buffer-name-style 'forward) ; Unique buffer names
#+END_SRC

- By default Emacs will display its tooltips in a separate frame,  force Emacs to use the echo area:

#+BEGIN_SRC emacs-lisp
(tooltip-mode -1)
(setq use-dialog-box nil ;; have Emacs use the echo area for everything
      tooltip-use-echo-area t)
(defalias 'yes-or-no-p 'y-or-n-p)
(setq visible-bell t)
(setq-default indicate-empty-lines t)
(when (not indicate-empty-lines) (toggle-indicate-empty-lines))
(global-visual-line-mode t)
(setq-default line-spacing 2)
(setq truncate-string-ellipsis "…")
(setq scroll-preserve-screen-position t)
#+END_SRC

Padding

#+BEGIN_SRC emacs-lisp
;; (setq-default left-margin-width 1
;;               right-margin-width 1)
;; (set-window-buffer nil (current-buffer))

(add-to-list 'default-frame-alist '(internal-border-width . 4))
(set-frame-parameter nil 'internal-border-width 4)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(line-number-mode t) ; show line-number in the mode line
(column-number-mode t) ; show column-number in the mode line
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq mouse-wheel-follow-mouse 't
      mouse-wheel-scroll-amount '(1 ((shift) . 1)))

(setq
 ;; inhibit-startup-message t         ; Don't show the startup message...
 ;; inhibit-startup-screen t          ; ... or screen
 cursor-in-non-selected-windows t  ; Hide the cursor in inactive windows
 ;; initial-scratch-message nil       ; Empty scratch buffer
 help-window-select t              ; Select help window so it's easy to quit it with 'q'
 )
;; This is rather radical, but saves from a lot of pain in the ass.
;; When split is automatic, always split windows vertically
(setq split-height-threshold 0
      split-width-threshold nil)
#+END_SRC

- Set line wrapping

#+BEGIN_SRC emacs-lisp
(setq-default fill-column 1024)
(set-default 'truncate-lines nil)
(auto-fill-mode t) ;; Wrap lines automatically
#+END_SRC

#+BEGIN_SRC emacs-lisp
(tool-bar-mode nil) ;; disable the toolbar
(toggle-scroll-bar nil) ;; disable the scroll bar
#+END_SRC

** themes

#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-spacegrey t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; or for treemacs users
  (setq doom-themes-treemacs-theme "doom-spacegrey")
  (doom-themes-treemacs-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+END_SRC

** font

#+BEGIN_SRC emacs-lisp
(when (eq system-type 'darwin)
  (set-face-attribute 'default nil
		                  :family "JuliaMono"
		                  :height 140
		                  ))
(setq-default mac-allow-anti-aliasing t)
(setq inhibit-compacting-font-caches t)
#+END_SRC

** syntax highlighting

- Enable syntax highlighting everywhere

#+BEGIN_SRC emacs-lisp
(require 'font-lock)
(setq font-lock-maximum-decoration t)
(global-font-lock-mode t)
(global-hi-lock-mode nil)
(setq jit-lock-contextually t
      jit-lock-stealth-verbose t)
#+END_SRC

* internal

** skeletons

#+BEGIN_SRC emacs-lisp
(setq skeleton-pair t) ; enable pairing

(defun quoted-parentheses (arg)
  (interactive "P")
  (if (looking-back "\\\\")
      (skeleton-insert '(nil "(" _ "\\)") nil)
    (skeleton-pair-insert-maybe arg))
  )

(defun quoted-brackets (arg)
  (interactive "P")
  (if (looking-back "\\\\")
      (skeleton-insert '(nil "[" _ "\\]") nil)
    (skeleton-pair-insert-maybe arg))
  )

(global-set-key "(" 'quoted-parentheses)
(global-set-key "[" 'quoted-brackets)
#+END_SRC

** electric pairs

#+BEGIN_SRC emacs-lisp
(use-package elec-pair
  :config
	(electric-pair-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defvar org-electric-pairs '((?/ . ?/)
														 (?~ . ?~)) "electric pairs for org-mode")

(defun org-add-electric-pairs ()
  (setq-local electric-pair-pairs (append electric-pair-pairs org-electric-pairs)
              electric-pair-text-pairs electric-pair-pairs))

(add-hook 'org-mode-hook 'org-add-electric-pairs)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defvar LaTeX-electric-pairs '((?` . ?')) "Electric pairs for LaTeX-mode.")

(defun LaTeX-add-electric-pairs ()
  (setq-local electric-pair-pairs (append electric-pair-pairs LaTeX-electric-pairs)
              electric-pair-text-pairs electric-pair-pairs)
  )

(add-hook 'LaTeX-mode-hook 'LaTeX-add-electric-pairs)
#+END_SRC

** ispell

- For spell checking
#+BEGIN_SRC emacs-lisp
(setq ispell-program-name "aspell" ; could be ispell
      ispell-dictionary "british"
      )
(customize-set-variable 'ispell-extra-args '("--sug-mode=ultra"))
#+END_SRC

* external, etc.

** exec-path-from-shell

#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :if (memq window-system '(mac ns x))
  :demand
  :config
  (exec-path-from-shell-initialize))
#+END_SRC

To see:

#+BEGIN_SRC emacs-lisp
;; (getenv "PATH")
#+END_SRC

** no-littering

#+BEGIN_SRC emacs-lisp
(use-package no-littering
  :init
  (require 'recentf)
  (require 'no-littering)
  (add-to-list 'recentf-exclude no-littering-var-directory)
  (add-to-list 'recentf-exclude no-littering-etc-directory)
  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
  :config
  (setq create-lockfiles nil
        delete-old-versions t
        kept-new-versions 6
        kept-old-versions 2
        version-control t))
#+END_SRC

** which-key

shows command completions

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :demand t
  :custom
  (which-key-sort-order 'which-key-prefix-then-key-order)
  :init
  (setq which-key-idle-delay 0.1
        which-key-max-display-columns nil)
  :config
  (which-key-mode t)
  (which-key-setup-minibuffer)
  (set-face-attribute
   'which-key-local-map-description-face nil :weight 'bold))
#+END_SRC

** rainbow delimiters

#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :defer t
  :hook
  (prog-mode . rainbow-delimiters-mode)
  :custom-face ;; https://ericscrivner.me/2015/06/better-emacs-rainbow-delimiters-color-scheme/
  (rainbow-delimiters-depth-1-face ((t (:foreground "dark orange"))))
  (rainbow-delimiters-depth-2-face ((t (:foreground "deep pink"))))
  (rainbow-delimiters-depth-3-face ((t (:foreground "chartreuse"))))
  (rainbow-delimiters-depth-4-face ((t (:foreground "deep sky blue"))))
  (rainbow-delimiters-depth-5-face ((t (:foreground "yellow"))))
  (rainbow-delimiters-depth-6-face ((t (:foreground "orchid"))))
  (rainbow-delimiters-depth-7-face ((t (:foreground "spring green"))))
  (rainbow-delimiters-depth-8-face ((t (:foreground "sienna1")))))
#+END_SRC

** browse kill ring

#+BEGIN_SRC emacs-lisp
(use-package browse-kill-ring)
#+END_SRC

** puni

The default `puni-mode-map' respects emacs. We don't, so clear and rewrite it.

#+BEGIN_SRC emacs-lisp
(use-package puni
  :defer t
  :config
  (puni-global-mode)
  (setcdr puni-mode-map nil)
  :bind
  (:map puni-mode-map
        ("DEL" . puni-backward-delete-char)
        ("C-d" . puni-forward-delete-char)
        ("M-d" . puni-forward-kill-word)
        ("M-DEL" . puni-backward-kill-word)
        ("C-k" . puni-kill-line)
        ("C-u" . puni-backward-kill-line)
        ("C-h" . puni-force-delete)
        ("C-M-f" . puni-forward-sexp)
        ("C-M-b" . puni-backward-sexp)
        ("C-M-a" . puni-beginning-of-sexp)
        ("C-M-e" . puni-end-of-sexp)
        )
  :config
  (setq puni--debug t puni-confirm-when-delete-unbalanced-active-region nil)
  :hook
  (term-mode #'puni-disable-puni-mode)
  ;;(prog-mode #'puni-flyindent-mode)
  )
#+END_SRC

** smartparens

#+BEGIN_SRC emacs-lisp
;; (use-package smartparens
;;   :disabled
;;   :diminish smartparens-mode ;; Do not show in modeline
;;   :init
;;   (require 'smartparens-config)
;; 	(require 'smartparens-latex)
;;   (require 'smartparens-rust)
;;   :config
;; 	(sp-local-pair 'latex-mode "\\(" "\\)" :trigger-wrap "$")
;;   (smartparens-global-mode t) ;; These options can be t or nil.
;;   (show-smartparens-global-mode t)
;;   ;; (sp-show-pair-from-inside t)
;;   )

;; needed to ensure text isn't deleted
;; https://github.com/Fuco1/smartparens/issues/834
;; (define-key LaTeX-mode-map (kbd "$") 'self-insert-command) ;; needs company
;; (sp-with-modes
;;     '(tex-mode LaTeX-mode)
;;   (sp-local-pair "\\(" "\\)"
;; 		 :unless '(sp-latex-point-after-backslash)
;; 		 :trigger-wrap "$"
;; 		 :trigger "$"))
#+END_SRC

** multiple cursors

#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :bind (("C->" . mc/mark-next-like-this)
	       ("C-<" . mc/mark-previous-like-this)
	       ("C-c C->" . mc/mark-all-like-this)
	       ("C-c C-SPC" . mc/edit-lines)
	       ("M-<M-down-mouse-1>" . mc/add-cursor-on-click)))
#+END_SRC

** undo tree

#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :init
  (global-undo-tree-mode)
  :custom
  (undo-tree-history-directory-alist '(("." . "~/.emacs.d/undoTree"))))
#+END_SRC

** fix-word

#+BEGIN_SRC emacs-lisp
(use-package fix-word
  :bind (("M-u" . #'fix-word-upcase)
	       ("M-l" . #'fix-word-downcase)
	       ("M-c" . #'fix-word-capitalize)))
#+END_SRC

** highlight indentation

- To highlight indentations
  - Options are fill, column, and character
  - There's no way to get indentation on empty lines as of now

#+BEGIN_SRC emacs-lisp
(use-package highlight-indent-guides
  :init
  (setq highlight-indent-guides-method 'character)
  (add-hook 'prog-mode-hook 'highlight-indent-guides-mode) ;; issue if use with :hook
  :custom
  (highlight-indent-guides-auto-odd-face-perc 50)
  (highlight-indent-guides-auto-even-face-perc 50)
  (highlight-indent-guides-auto-character-face-perc 55)
  )
#+END_SRC

#+RESULTS:

** yasnippet

#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :hook ((text-mode
          prog-mode
          conf-mode
          snippet-mode) . yas-minor-mode-on)
  :init
  (setq yas-snippet-dir "~/.emacs.d/snippets"))
#+END_SRC

* git

** magit

#+BEGIN_SRC emacs-lisp
(use-package magit
  :bind
  (("C-c g s" . magit-status)
   ("C-c g g" . magit-status)
   ("C-c g S" . magit-status-here)
   ("C-c g b" . magit-blame)
   ("C-c g l" . magit-log)
   ("C-c g d" . magit-diff)
   ("C-c g r" . magit-refresh)
   )
  :custom
  (magit-log-arguments '("--graph" "--decorate" "--color"))
  )
#+END_SRC

#+RESULTS:
: magit-refresh

** diff-hl

#+BEGIN_SRC emacs-lisp
(use-package diff-hl
  :config
  (setq diff-hl-draw-borders t)
  (face-spec-set 'diff-hl-insert `((((background light)) :background ,(face-attribute 'default :background))
                                   (t :background ,(face-attribute 'default :background))))
  (face-spec-set 'diff-hl-delete `((((background light)) :background ,(face-attribute 'default :background))
                                   (t :background ,(face-attribute 'default :background))))
  (face-spec-set 'diff-hl-change `((((background light)) :background ,(face-attribute 'default :background))
                                   (t :background ,(face-attribute 'default :background))))
  (global-diff-hl-mode)
  (diff-hl-flydiff-mode)
  (diff-hl-show-hunk-mouse-mode)
  :init
  :hook
  ((magit-pre-refresh . diff-hl-magit-pre-refresh)
   (magit-post-refresh . diff-hl-magit-post-refresh)
   )
  )
#+END_SRC

* org mode

#+BEGIN_SRC emacs-lisp
(use-package org
  :mode ("\\.org" . org-mode)
  :custom
  (org-directory "~/Dropbox/Docs/Org")
  (org-default-notes-file (concat org-directory "/OrgCapture.org"))
  (org-src-fontify-natively t) ;; use syntax-highlighting for src blocks
  (org-src-strip-leading-and-trailing-blank-lines t) ;; strip blank lines when closing src block editor
  (org-src-preserve-indentation t) ;; preserve indentation in src blocks, don't re-indent
  (org-src-tab-acts-natively t) ;; respect the src block syntax for tabs
  (org-startup-truncated nil) ;; wrap lines on startup
  (org-catch-invisible-edits 'show-and-error) ;; if editing in an invisible region, complain.
  (org-confirm-babel-evaluate t) ;; ask when evaluating every src block
  (org-hide-emphasis-markers nil) ;; don't hide emphasis markers, because there are soo many
  (org-pretty-entities t) ;; try to draw utf8 characters, don't just show their code
  (org-fontify-quote-and-verse-blocks t) ;; add a background to begin_quote and begin_verse blocks.
  (org-cycle-separator-lines -1) ;; don't collapse blank lines when collapsing a tree
  (org-tag-column 0) ;; don't align tags
  (org-adapt-indentation nil) ;; prevent demoting heading also shifting text inside sections
  ;; leave shift keys alone!
  (org-support-shift-select t)
  (org-replace-disputed-keys t)

  (org-fontify-done-headline t)
  (org-fontify-quote-and-verse-blocks t)
  (org-fontify-whole-heading-line t)
  (org-list-allow-alphabetical t)
  ;; :hook
  ;; (org-mode . org-indent-mode)
  ;; (org-mode . flyspell-mode)
  ;; (org-mode . flyspell-buffer)

  :config
  (add-to-list 'org-structure-template-alist '("se" . "src elisp"))
  (add-to-list 'org-structure-template-alist '("ss" . "src sh"))
  (add-to-list 'org-structure-template-alist '("sp" . "src python"))
  (org-babel-do-load-languages 'org-babel-load-languages
                               '((C . t)
                                 (dot . t)
                                 (emacs-lisp . t)
                                 (js . t)
                                 (latex . t)
                                 (lisp . t)
                                 (org . t)
                                 (python . t)
                                 ;; (rust . t)
                                 (scheme . t)
                                 ))
  ;; :hook
  ;; (org-mode . toc-org-mode)
  )
#+END_SRC

** background org stuff

- LaTeX in org
#+BEGIN_SRC emacs-lisp
(setq org-format-latex-options
      '(:foreground default
                    :background default
                    :scale 1
                    :html-foreground "Black"
                    :html-background "Transparent"
                    :html-scale 1.0
                    :matchers ("begin" "$1" "$$" "\\(" "\\[")))
#+END_SRC

- Including all org files from a directory into the agenda
  - Note, multiple directories can be added, like:
    - (setq org-agenda-files (quote ("~/agenda/work" "~/agenda/todo")))
#+BEGIN_SRC emacs-lisp
(setq org-agenda-files (file-expand-wildcards "~/Dropbox/Docs/Org/*.org"))
#+END_SRC

- Auto add time and closing note to done
#+BEGIN_SRC emacs-lisp
(setq org-log-done 'time
      org-log-done 'note)
#+END_SRC

* languages

** LaTeX

Where to find LaTeX.

#+BEGIN_SRC emacs-lisp
(let ((TeX-path (expand-file-name "/usr/local/bin:/usr/local/texlive/2023basic/bin/universal-darwin")))
  (setenv "PATH" (concat TeX-path ":" (getenv "PATH")))
  (add-to-list 'exec-path TeX-path))
#+END_SRC

Note, mode binds tex files to LaTeX-mode explicitly.
I guess without being explicit mode binds to the use-package package (here tex).

Note, the docstring requires setting ~LaTeX-math-abbrev-prefix~ by ~M-x customize~, but this is only for after latex is loaded.

#+BEGIN_SRC emacs-lisp
(use-package tex
  :mode ("\\.tex\\'" . LaTeX-mode)
  ;; :defer f
  :ensure auctex
  :hook
  (LaTeX-mode . LaTeX-math-mode)
  (LaTeX-mode . turn-on-reftex)
  (LaTeX-mode . TeX-source-correlate-mode)
  (LaTeX-mode . display-line-numbers-mode)
	(LaTeX-mode . visual-line-mode)
  (LaTeX-mode . flyspell-mode)
	(LaTeX-mode . TeX-fold-mode)
	(LaTeX-mode .	(lambda () (set (make-variable-buffer-local 'TeX-electric-math)
																(cons "\\(" "\\)"))))
  ;; (LaTeX-mode . flyspell-buffer)

  :custom
  (TeX-PDF-mode t)
  (TeX-master nil) ; All master files called "master".
  (TeX-auto-save t)
  (TeX-save-query nil)
  (TeX-parse-self t)
  (reftex-plug-into-AUCTeX t)
  (TeX-electric-sub-and-superscript t)
	(LaTeX-electric-left-right-brace t)
	;;(TeX-electric-math t)
  (TeX-view-program-selection '((output-pdf "PDF Viewer")))
  (TeX-view-program-list '(("PDF Viewer"
														"/Applications/Skim.app/Contents/SharedSupport/displayline -r -b -g %n %o %b")))
  (TeX-source-correlate-method-active 'synctex)
	(font-latex-fontify-sectioning 'color)
  (font-latex-fontify-script nil)
	(LaTeX-math-abbrev-prefix "C-c 1")
  :custom-face
  ;; (font-latex-math-face ((t (:foreground "pale violet red"))))
  (font-latex-subscript-face ((t nil)))
  (font-latex-superscript-face ((t nil))))

(use-package auctex-latexmk
  :init
  (auctex-latexmk-setup)
  (add-to-list 'TeX-command-list
							 '("Other"
								 ""
								 TeX-run-command t t
								 :help "Run an arbitrary command"))
  (add-to-list 'TeX-command-list
							 '("Clean"
								 "TeX-clean"
								 TeX-run-function nil t
								 :help "Delete generated intermediate files"))
  (add-to-list 'TeX-command-list
							 '("View"
								 "%V"
								 TeX-run-discard-or-function t t
								 :help "Run Viewer"))
  (add-to-list 'TeX-command-list
							 '("Biber"
								 "biber %(output-dir) %s" TeX-run-Biber nil (plain-tex-mode latex-mode)
								 :help "Run Biber"))
  (add-to-list 'TeX-command-list
							 '("BibTeX"
								 "bibtex %(O?aux)" TeX-run-BibTeX nil (plain-tex-mode latex-mode context-mode)
								 :help "Run BibTeX"))
  (add-to-list 'TeX-command-list
							 '("LaTeX"
								 "%`%l%(mode)%' %T" TeX-run-TeX nil (latex-mode)
								 :help "Run LaTeX"))
  (add-to-list 'TeX-command-list
							 '("LatexMk"
								 "latexmk %(-PDF)%S%(mode) %(file-line-error) %(extraopts) %t"
								 TeX-run-latexmk nil (plain-tex-mode latex-mode)
								 :help "Run LatexMk")))
#+END_SRC

- use Skim as default pdf viewer
  - Skim's displayline is used for forward search (from .tex to .pdf)
  - option -r relaods the file; option -b highlights the current line; option -g opens Skim in the background
  - For this to work, it seems one needs no spaces in the file name

- ReFtex from
  https://piotrkazmierczak.com/2010/emacs-as-the-ultimate-latex-editor/

** lisp

** racket

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/local-packages/emacs-ob-racket")
(add-to-list 'org-src-lang-modes '("racket" . racket))
(org-babel-do-load-languages
 'org-babel-load-languages
 '((racket . t)))
#+END_SRC

** python

#+BEGIN_SRC emacs-lisp
(use-package python
	:defer t
	:config
	:hook
	(python-mode . (lambda () (setq fill-column 127)))
	(python-mode . (lambda () (setq indent-tabs-mode nil)))
	(python-mode . visual-line-mode))
#+END_SRC

pip3 install autopep8

#+BEGIN_SRC emacs-lisp
(use-package py-autopep8
  :hook ((python-mode) . py-autopep8-mode))
#+END_SRC

Lines marked 'a' are from: https://github.com/jorgenschaefer/elpy/issues/1867
# Lines marked 'b' are from: https://github.com/jorgenschaefer/elpy/pull/1970

# #+BEGIN_SRC emacs-lisp
# (use-package elpy
#   :defer t
#   :init
#   (advice-add 'python-mode :before 'elpy-enable)
#   :config
#   (setq elpy-rpc-python-command "python3") ; a
#   (setq python-shell-interpreter "python3") ; a
#   (setq python-shell-interpreter-args "-i")
#   ;; (setq python-shell-interpreter-args "-c exec('__import__(\\'readline\\')') -i")
#   (setq elpy-shell-darwin-use-pty t) ; b
#   )
# #+END_SRC

install: pip install pyright

** rust

https://robert.kra.hn/posts/rust-emacs-setup/


#+BEGIN_SRC emacs-lisp
(use-package rust-mode
  :mode "\\.rs\\'"
  :init
  (setq rust-format-on-save t)
  :bind
  (:map rust-mode-map
        ("C-c r" . rust-run)
        ("C-c c" . rust-compile)
        ("C-c t" . rust-test))
  )

(use-package rustic
	:custom
  (rustic-analyzer-command '("rustup" "run" "stable" "rust-analyzer")))
#+END_SRC

** ASP

#+BEGIN_SRC emacs-lisp
(use-package pasp-mode
  :defer t
  :mode ("\\.lp\\'" "\\.las\\'")
  )
#+END_SRC

** C(pp)

#+BEGIN_SRC emacs-lisp
(use-package clang-format
  :defer t
  :pin melpa
  :bind
  (("C-c i" . clang-format-region)
   ("C-c u" . clang-format-buffer))
  :init
  (setq clang-format-style-option "llvm")
  )
#+END_SRC

** markdown

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :mode (("/README\\(?:\\.md\\)?\\'" . gfm-mode)
         ("\\.m[k]d\\'" . gfm-mode))
  :config
  (setq markdown-fontify-code-blocks-natively t
        markdown-header-scaling t)
  (setq-default
   markdown-enable-math t)
  )

#+END_SRC

** lua

#+BEGIN_SRC emacs-lisp
(use-package lua-mode
  :custom
  (lua-indent-level 2)
  :config
  ;; (lua-indent-level 2)
  )
#+END_SRC

#+RESULTS:

* completion

** orderless

#+BEGIN_SRC emacs-lisp
(use-package orderless
  :custom
  (completion-styles '(orderless basic))
  (completion-category-defaults nil)
  ;; (completion-category-overrides '((file (styles partial-completion))))
  )
#+END_SRC

** vertico

vertico for minibuffer completions

#+BEGIN_SRC emacs-lisp
(use-package vertico
  :init
  (vertico-mode)
  ;; (setq vertico-scroll-margin 0) ;; Different scroll margin
  (setq vertico-count 40) ;; Show more candidates
  (setq vertico-resize t) ;; Grow and shrink the Vertico minibuffer
  (setq vertico-cycle t)) ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
#+END_SRC

** marginalia

adds marginalia to the minibuffer completions

#+BEGIN_SRC emacs-lisp
(use-package marginalia
  :init
  (marginalia-mode)
  :bind (:map minibuffer-local-map
              ("M-A" . marginalia-cycle))
  :custom
  (marginalia-max-relative-age 0)
  (marginalia-align 'right))
#+END_SRC

** consult

#+BEGIN_SRC emacs-lisp
;; (use-package consult-flycheck)
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; Example configuration for Consult
(use-package consult
  ;; Replace bindings. Lazily loaded due by `use-package'.
  :bind (;; C-c bindings in `mode-specific-map'
         ("C-c M-x" . consult-mode-command)
         ("C-c h" . consult-history)
         ("C-c k" . consult-kmacro)
         ("C-c m" . consult-man)
         ("C-c i" . consult-info)
         ([remap Info-search] . consult-info)
         ;; C-x bindings in `ctl-x-map'
         ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
         ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
         ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
         ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
         ("C-x t b" . consult-buffer-other-tab)    ;; orig. switch-to-buffer-other-tab
         ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
         ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
         ;; Custom M-# bindings for fast register access
         ("M-#" . consult-register-load)
         ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
         ("C-M-#" . consult-register)
         ;; Other custom bindings
         ("M-y" . consult-yank-pop)                ;; orig. yank-pop
         ;; M-g bindings in `goto-map'
         ("M-g e" . consult-compile-error)
         ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
         ("M-g g" . consult-goto-line)             ;; orig. goto-line
         ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
         ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)
         ;; M-s bindings in `search-map'
         ("M-s d" . consult-find)                  ;; Alternative: consult-fd
         ("M-s c" . consult-locate)
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("M-s s" . consult-line)
         ("M-s L" . consult-line-multi)
         ("M-s k" . consult-keep-lines)
         ("M-s u" . consult-focus-lines)
         ;; Isearch integration
         ("M-s e" . consult-isearch-history)
         :map isearch-mode-map
         ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
         ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
         ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
         ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
         ;; Minibuffer history
         :map minibuffer-local-map
         ("M-s" . consult-history)                 ;; orig. next-matching-history-element
         ("M-r" . consult-history))                ;; orig. previous-matching-history-element
  ;; Enable automatic preview at point in the *Completions* buffer. This is
  ;; relevant when you use the default completion UI.
  :hook
  (completion-list-mode . consult-preview-at-point-mode)
  :init

  ;; Optionally configure the register formatting. This improves the register
  ;; preview for `consult-register', `consult-register-load',
  ;; `consult-register-store' and the Emacs built-ins.
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  ;; Configure other variables and modes in the :config section, after lazily loading the package.
  :config

  ;; Optionally configure preview. The default value
  ;; is 'any, such that any key triggers the preview.
  ;; (setq consult-preview-key 'any)
  ;; (setq consult-preview-key "M-.")
  ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
  ;; For some commands and buffer sources it is useful to configure the
  ;; :preview-key on a per-command basis using the `consult-customize' macro.
  (consult-customize
   consult-theme :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register
   consult--source-recent-file consult--source-project-recent-file
   ;; :preview-key "M-."
   :preview-key '(:debounce 0.4 any))

  ;; Optionally configure the narrowing key.
  ;; Both < and C-+ work reasonably well.
  (setq consult-narrow-key "<") ;; "C-+"

  ;; Optionally make narrowing help available in the minibuffer.
  ;; You may want to use `embark-prefix-help-command' or which-key instead.
  ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

  ;; By default `consult-project-function' uses `project-root' from project.el.
  ;; Optionally configure a different project root function.
  ;;;; 1. project.el (the default)
  ;; (setq consult-project-function #'consult--default-project--function)
  ;;;; 2. vc.el (vc-root-dir)
  ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
  ;;;; 3. locate-dominating-file
  ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
  ;;;; 4. projectile.el (projectile-project-root)
  ;; (autoload 'projectile-project-root "projectile")
  ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
  ;;;; 5. No project support
  ;; (setq consult-project-function nil)
  )
#+END_SRC

*** consult-project-extra

https://github.com/Qkessler/consult-project-extra

#+BEGIN_SRC emacs-lisp
(use-package consult-project-extra
  :bind
  (("C-c p f" . consult-project-extra-find)
   ("C-c p o" . consult-project-extra-find-other-window))
  )
#+END_SRC

** corfu

#+BEGIN_SRC emacs-lisp
(use-package corfu
  :init
  (global-corfu-mode)
  ;; Optional customizations
  :custom
  (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
  (corfu-auto t)                 ;; Automatically display popups wherever available
  (corfu-separator ?\s)          ;; Orderless field separator
  ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
  ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
  ;; (corfu-preview-current nil)    ;; Disable current candidate preview
  (corfu-preselect 'directory) ;; Select the first candidate, except for directories
  ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
  ;; (corfu-scroll-margin 5)        ;; Use scroll margin

  ;; Enable Corfu only for certain modes.
  ;; :hook ((prog-mode . corfu-mode))

  ;; Recommended: Enable Corfu globally.  This is recommended since Dabbrev can
  ;; be used globally (M-/).  See also the customization variable
  ;; `global-corfu-modes' to exclude certain modes.
  :bind
  (:map corfu-map
	      ("RET" . nil) ;; Free the RET key for less intrusive behavior.
	      )
  )
#+END_SRC

#+RESULTS:

** cape

#+BEGIN_SRC emacs-lisp
(use-package cape
  ;; Bind dedicated completion commands
  ;; Alternative prefix keys: C-c p, M-p, M-+, ...
  :bind (("C-c p p" . completion-at-point) ;; capf
         ("C-c p t" . complete-tag)        ;; etags
         ("C-c p d" . cape-dabbrev)        ;; or dabbrev-completion
         ("C-c p h" . cape-history)
         ;; ("C-c p f" . cape-file)
         ("C-c p k" . cape-keyword)
         ("C-c p s" . cape-elisp-symbol)
         ("C-c p e" . cape-elisp-block)
         ("C-c p a" . cape-abbrev)
         ("C-c p l" . cape-line)
         ("C-c p w" . cape-dict)
         ("C-c p :" . cape-emoji)
         ("C-c p \\" . cape-tex)
         ("C-c p _" . cape-tex)
         ("C-c p ^" . cape-tex)
         ("C-c p &" . cape-&sgml)
         ("C-c p r" . cape-rfc1345))
  :init
  ;; Add to the global default value of `completion-at-point-functions' which is
  ;; used by `completion-at-point'.  The order of the functions matters, the
  ;; first function returning a result wins.  Note that the list of buffer-local
  ;; completion functions takes precedence over the global list.
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-file)
  (add-to-list 'completion-at-point-functions #'cape-elisp-block)
  ;;(add-to-list 'completion-at-point-functions #'cape-history)
  ;;(add-to-list 'completion-at-point-functions #'cape-keyword)
  ;;(add-to-list 'completion-at-point-functions #'cape-tex)
  ;;(add-to-list 'completion-at-point-functions #'cape-sgml)
  ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
  ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
  ;;(add-to-list 'completion-at-point-functions #'cape-dict)
  ;;(add-to-list 'completion-at-point-functions #'cape-elisp-symbol)
  ;;(add-to-list 'completion-at-point-functions #'cape-line)
  )
#+END_SRC

* lsp stuff

** eglot

maybe: https://github.com/casouri/eldoc-box
https://github.com/nemethf/eglot-x#rust-analyzer-extensions

#+BEGIN_SRC emacs-lisp
(use-package eglot
  :defer t
  :hook ((c-mode
          c-ts-mode
          c++-mode
          c++-ts-mode
          rustic-mode
          python-mode
          python-ts-mode) . eglot-ensure)
  )
#+END_SRC

#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'eglot
  (add-to-list 'eglot-server-programs
               '((rust-ts-mode rust-mode) . ("rust-analyzer" :initializationOptions (:check (:command "clippy")))))
  (add-to-list 'eglot-server-programs
               '(LaTeX-mode . ("TexLab")))
  )
#+END_SRC

* treesit

https://github.com/renzmann/treesit-auto
https://archive.casouri.cc/note/2023/tree-sitter-in-emacs-29/index.html

#+BEGIN_SRC emacs-lisp
(use-package treesit-auto
  :custom
  (treesit-auto-install 'prompt)
  :config
  (treesit-auto-add-to-auto-mode-alist 'all)
  (global-treesit-auto-mode))

(add-to-list 'major-mode-remap-alist '(c-mode . c-ts-mode))
(add-to-list 'major-mode-remap-alist '(c++-mode . c++-ts-mode))
(add-to-list 'major-mode-remap-alist '(c-or-c++-mode . c-or-c++-ts-mode))
#+END_SRC

* text expansion

** temple

#+BEGIN_SRC emacs-lisp
(use-package tempel
  ;; Require trigger prefix before template name when completing.
  ;; :custom
  ;; (tempel-trigger-prefix "<")

  :bind (("M-+" . tempel-complete) ;; Alternative tempel-expand
         ("M-*" . tempel-insert))

  :init

  ;; Setup completion at point
  (defun tempel-setup-capf ()
    ;; Add the Tempel Capf to `completion-at-point-functions'.
    ;; `tempel-expand' only triggers on exact matches. Alternatively use
    ;; `tempel-complete' if you want to see all matches, but then you
    ;; should also configure `tempel-trigger-prefix', such that Tempel
    ;; does not trigger too often when you don't expect it. NOTE: We add
    ;; `tempel-expand' *before* the main programming mode Capf, such
    ;; that it will be tried first.
    (setq-local completion-at-point-functions
                (cons #'tempel-expand
                      completion-at-point-functions)))

  (add-hook 'conf-mode-hook 'tempel-setup-capf)
  (add-hook 'prog-mode-hook 'tempel-setup-capf)
  (add-hook 'text-mode-hook 'tempel-setup-capf)

  ;; Optionally make the Tempel templates available to Abbrev,
  ;; either locally or globally. `expand-abbrev' is bound to C-x '.
  ;; (add-hook 'prog-mode-hook #'tempel-abbrev-mode)
  ;; (global-tempel-abbrev-mode)
)
#+END_SRC

#+RESULTS:
: tempel-insert

#+BEGIN_SRC emacs-lisp
(print tempel-path)
#+END_SRC

#+RESULTS:
: /Users/sparkes/.emacs.d/etc/tempel/templates.eld
